{"version":3,"sources":["state/index.ts","components/App/App.styles.tsx","components/App/App.tsx","lib/index.ts","components/Grid/Grid.styles.tsx","components/Grid/Grid.tsx","components/Menu/Menu.styles.tsx","components/Menu/ToggleButton.tsx","components/Menu/StyleSelect.tsx","components/Menu/Menu.tsx","components/TestCases/TestCases.styles.tsx","components/TestCases/TestCases.tsx","serviceWorker.ts","index.tsx"],"names":["AppContainer","styled","div","AppHeader","DemoArea","App","isIcon","candidate","displayName","controlIcons","Object","values","IconLibrary","filter","i","length","j","Math","floor","random","temp","slice","textInputAtom","atom","key","default","fileInputAtom","iconWeightAtom","iconSizeAtom","useControlSetAtom","shuffleAtom","iconSetSelector","selector","get","showControls","textInput","fileInput","testIcons","concat","Array","fill","name","svgString","newIcons","map","file","index","flat","customPreviewAtom","GridContainer","$size","Grid","size","useRecoilValue","weight","icons","setCustomPreview","useSetRecoilState","Provider","value","color","mirrored","Icon","onClick","height","width","src","encodeURIComponent","alt","MenuContainer","InputsContainer","TextInputLabel","TextInputContainer","hasValue","css","TextInput","textarea","DropInput","DropInputLabel","MainButton","button","ResetButton","SettingsContainer","menu","SliderContainer","Slider","input","attrs","type","SliderLabel","span","IndicatorContainer","Indicator","enabled","ToggleButton","children","options","StyleSelect","setter","replace","c","toUpperCase","searchable","labelField","onChange","itemRenderer","item","itemIndex","state","cursor","methods","role","aria-selected","className","addItem","contentRenderer","Menu","useRecoilState","setWeight","setSize","textInputValue","setTextInputValue","useState","filenames","setFilenames","setFileInputValues","useControls","setUseControls","shuffle","handleDrop","useCallback","acceptedFiles","a","newWeight","Promise","all","resolve","reject","content","reader","FileReader","onabort","onerror","onload","binaryString","result","suffix","split","onloadend","readAsText","placeholder","e","target","currentTarget","select","multiple","accept","onDrop","getRootProps","getInputProps","min","max","step","u","timeStamp","TestCaseContainer","IconButtonContainer","IconButton","$radius","$dark","TextButtonContainer","TextButton","$large","TestUIContainer","LargeIconContainer","MockMenu","MockMenuItem","MockToolbar","TestCases","customPreviewIcon","isControlPreview","ControlIcon","customSource","svgStringDark","useMemo","svgStringLight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ad171e0.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\nimport * as IconLibrary from \"phosphor-react\";\r\nimport { Icon } from \"phosphor-react\";\r\n\r\nimport { Weight, isIcon } from \"../lib\";\r\n\r\nlet controlIcons: Icon[] = Object.values(IconLibrary).filter(isIcon);\r\n\r\nfor (let i = controlIcons.length - 1; i > 0; i--) {\r\n  const j = Math.floor(Math.random() * i);\r\n  const temp = controlIcons[i];\r\n  controlIcons[i] = controlIcons[j];\r\n  controlIcons[j] = temp;\r\n}\r\n\r\ncontrolIcons = controlIcons.slice(0, 80);\r\n\r\nfor (let i = controlIcons.length - 1; i > 0; i--) {\r\n  const j = Math.floor(Math.random() * i);\r\n  const temp = controlIcons[i];\r\n  controlIcons[i] = controlIcons[j];\r\n  controlIcons[j] = temp;\r\n}\r\n\r\nexport const textInputAtom = atom<string>({\r\n  key: \"textInputAtom\",\r\n  default: \"\",\r\n});\r\n\r\nexport const fileInputAtom = atom<string[]>({\r\n  key: \"fileInputAtom\",\r\n  default: [],\r\n});\r\n\r\nexport const iconWeightAtom = atom<Weight>({\r\n  key: \"iconWeightAtom\",\r\n  default: \"regular\",\r\n});\r\n\r\nexport const iconSizeAtom = atom<number>({\r\n  key: \"iconSizeAtom\",\r\n  default: 32,\r\n});\r\n\r\nexport const useControlSetAtom = atom<boolean>({\r\n  key: \"useControlSetAtom\",\r\n  default: true,\r\n});\r\n\r\nexport const shuffleAtom = atom<number>({\r\n  key: \"shuffleAtom\",\r\n  default: 0,\r\n});\r\n\r\ntype DisplayIcon = Icon | { name: string; svgString: string };\r\n\r\nexport const iconSetSelector = selector<DisplayIcon[]>({\r\n  key: \"iconSetSelector\",\r\n  get: ({ get }) => {\r\n    const Q = get(shuffleAtom);\r\n    void Q;\r\n    const showControls = get(useControlSetAtom);\r\n    const textInput = get(textInputAtom);\r\n    const fileInput = get(fileInputAtom);\r\n\r\n    let testIcons: DisplayIcon[] = [];\r\n    if (textInput) {\r\n      testIcons = testIcons.concat(\r\n        new Array(8).fill({ name: \"textInput\", svgString: textInput })\r\n      );\r\n    }\r\n\r\n    if (fileInput) {\r\n      const newIcons = fileInput.map((file, index) => ({\r\n        name: `fileInput-${index}`,\r\n        svgString: file,\r\n      }));\r\n\r\n      testIcons = testIcons.concat(new Array(8).fill(newIcons).flat());\r\n    }\r\n\r\n    if (showControls) testIcons = testIcons.concat(controlIcons);\r\n\r\n    for (let i = testIcons.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      const temp = testIcons[i];\r\n      testIcons[i] = testIcons[j];\r\n      testIcons[j] = temp;\r\n    }\r\n\r\n    return testIcons;\r\n  },\r\n});\r\n\r\nexport const customPreviewAtom = atom<DisplayIcon | null>({\r\n  key: \"customPreviewIcon\",\r\n  default: null,\r\n});\r\n","import styled from 'styled-components';\r\n\r\nexport const AppContainer = styled.div`\r\n  min-height: 100vh;\r\n  margin: 0 auto;\r\n  max-width: 1000px;\r\n  padding: 16px 144px;\r\n  padding-bottom: 16px;\r\n  background-color: white;\r\n  font-family: 'Manrope', sans-serif;\r\n  font-size: 13px;\r\n\r\n  & h1 {\r\n    font-weight: normal;\r\n    font-size: 24px;\r\n  }\r\n\r\n  & p {\r\n    font-size: 16px;\r\n  }\r\n\r\n  & input, button, textarea, select {\r\n    font-family: 'IBM Plex Mono', monospace;\r\n    font-size: 13px;\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const AppHeader = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nexport const DemoArea = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 360px;\r\n  align-items: flex-start;\r\n  padding-bottom: 64px;\r\n  gap: 88px;\r\n`;","import React from \"react\";\r\n\r\nimport { AppContainer, AppHeader, DemoArea } from \"./App.styles\";\r\nimport { Menu, Grid, TestCases } from \"..\";\r\n\r\n\r\n\r\nconst App: React.FC<{}> = () => {\r\n  return (\r\n    <AppContainer>\r\n      <AppHeader>\r\n        <h1>Phosphor Testbed</h1>\r\n        <p>Test new icons for consistency, alignment, usability in context</p>\r\n      </AppHeader>\r\n      <Menu />\r\n      <DemoArea>\r\n        <Grid />\r\n        <TestCases />\r\n      </DemoArea>\r\n    </AppContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { Icon } from \"phosphor-react\";\r\n\r\nexport type Weight = \"thin\" | \"light\" | \"regular\" | \"bold\" | \"fill\" | \"duotone\";\r\n\r\nexport const isIcon = (candidate: any): candidate is Icon => {\r\n  return !!candidate.displayName;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const GridContainer = styled.div<{ $size: number }>`\r\n  display: inline-flex;\r\n  flex-flow: wrap;\r\n  justify-content: space-between;\r\n  gap: ${({ $size }) => $size}px;\r\n\r\n  & > * {\r\n    cursor: pointer;\r\n  }\r\n\r\n  & img {\r\n    transition: background 200ms ease;\r\n  }\r\n\r\n  &:hover img {\r\n    background: rgba(146, 91, 255, 0.5);\r\n  }\r\n`;","import React from \"react\";\r\nimport { IconContext } from \"phosphor-react\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\n\r\nimport {\r\n  iconSizeAtom,\r\n  iconWeightAtom,\r\n  iconSetSelector,\r\n  customPreviewAtom,\r\n} from \"../../state\";\r\nimport { isIcon } from \"../../lib\";\r\nimport { GridContainer } from \"./Grid.styles\";\r\n\r\nconst Grid: React.FC<{}> = () => {\r\n  const size = useRecoilValue(iconSizeAtom);\r\n  const weight = useRecoilValue(iconWeightAtom);\r\n  const icons = useRecoilValue(iconSetSelector);\r\n  const setCustomPreview = useSetRecoilState(customPreviewAtom);\r\n\r\n  return (\r\n    <IconContext.Provider\r\n      value={{ size, weight, color: \"black\", mirrored: false }}\r\n    >\r\n      <GridContainer $size={size}>\r\n        {icons.map((Icon, index) =>\r\n          isIcon(Icon) ? (\r\n            <Icon\r\n              key={`${Icon.displayName}-${index}`}\r\n              onClick={() => setCustomPreview(Icon)}\r\n            />\r\n          ) : (\r\n            <img\r\n              key={`${Icon.name}-${index}`}\r\n              height={size}\r\n              width={size}\r\n              src={`data:image/svg+xml,${encodeURIComponent(Icon.svgString)}`}\r\n              alt=\"\"\r\n              onClick={() => setCustomPreview(Icon)}\r\n            />\r\n          )\r\n        )}\r\n      </GridContainer>\r\n    </IconContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const MenuContainer = styled.div`\r\n  padding: 0;\r\n  margin: 0;\r\n  background-color: white;\r\n`;\r\n\r\nexport const InputsContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 16px;\r\n`;\r\n\r\nexport const TextInputLabel = styled.div`\r\n  position: absolute;\r\n  top: calc(50% - 44px);\r\n  left: 0;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 32px 24px;\r\n  user-select: none;\r\n  pointer-events: none;\r\n`;\r\n\r\nexport const TextInputContainer = styled.div<{ hasValue: boolean }>`\r\n  position: relative;\r\n  flex: 3.5;\r\n  display: flex;\r\n  /* flex-direction: column; */\r\n\r\n  ${TextInputLabel} {\r\n    ${({ hasValue }) =>\r\n      hasValue &&\r\n      css`\r\n         {\r\n          display: none;\r\n        }\r\n      `};\r\n  }\r\n\r\n  &:focus-within ${TextInputLabel} {\r\n    display: none;\r\n  }\r\n\r\n  &:focus-within ::placeholder {\r\n    opacity: 0;\r\n  }\r\n`;\r\n\r\nexport const TextInput = styled.textarea`\r\n  width: 100%;\r\n  min-height: 88px;\r\n  /* flex: 1; */\r\n  margin: 0;\r\n  padding: 16px 24px;\r\n  background: rgba(146, 91, 255, 0.1);\r\n  border: 1px solid #925bff;\r\n  box-sizing: border-box;\r\n  border-radius: 6px;\r\n  resize: vertical;\r\n\r\n  &::placeholder {\r\n    color: black;\r\n  }\r\n`;\r\n\r\nexport const DropInput = styled.div`\r\n  flex: 3;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 16px 24px;\r\n  background: rgba(146, 91, 255, 0.1);\r\n  border: 1px solid #925bff;\r\n  box-sizing: content-box;\r\n  border-radius: 6px;\r\n  font-family: \"IBM Plex Mono\", monospace;\r\n  font-size: 13px;\r\n  outline: none;\r\n  cursor: pointer;\r\n  max-height: 214px;\r\n  overflow-y: auto;\r\n\r\n  & p {\r\n    margin: 0;\r\n    font-size: 13px;\r\n  }\r\n`;\r\n\r\nexport const DropInputLabel = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 12px;\r\n\r\n  & p {\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport const MainButton = styled.button`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 11.5px;\r\n  min-height: 48px;\r\n  padding: 11px 24px;\r\n  border: 1px solid #925bff;\r\n  background: white;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background: rgba(146, 91, 255, 0.1);\r\n  }\r\n\r\n  &:active {\r\n    background: rgba(146, 91, 255, 0.5);\r\n  }\r\n`;\r\n\r\nexport const ResetButton = styled(MainButton)`\r\n  width: 120px;\r\n  height: 88px;\r\n`;\r\n\r\nexport const SettingsContainer = styled.menu`\r\n  position: sticky;\r\n  top: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  gap: 16px;\r\n  padding: 16px 0;\r\n  margin: 0 0 24px;\r\n  background-color: white;\r\n`;\r\n\r\nexport const SliderContainer = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 12px;\r\n  padding: 0 24px;\r\n`;\r\n\r\nexport const Slider = styled.input.attrs({ type: \"range\" })`\r\n  flex: 1;\r\n  background: transparent;\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  border: 1px solid #925bff;\r\n  border-radius: 80px;\r\n  height: 12px;\r\n  box-sizing: border-box;\r\n  margin-top: 5px;\r\n\r\n  &::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 32px;\r\n    height: 20px;\r\n    padding: 6px;\r\n    border-radius: 80px;\r\n    background: #925bff;\r\n    cursor: pointer;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 16px;\r\n    height: 16px;\r\n    padding: 6px;\r\n    border-radius: 50%;\r\n    background: #925bff;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const SliderLabel = styled.span`\r\n  width: 36px;\r\n  font-family: \"IBM Plex Mono\", monospace;\r\n  font-size: 13px;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { MainButton } from \"./Menu.styles\";\r\n\r\ninterface ToggleButtonProps\r\n  extends React.DetailedHTMLProps<\r\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    HTMLButtonElement\r\n  > {\r\n  enabled: boolean;\r\n}\r\n\r\nconst IndicatorContainer = styled.div`\r\n  height: 24px;\r\n  width: 24px;\r\n  border: 1px solid #925bff;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  padding: 3px;\r\n`;\r\n\r\nconst Indicator = styled.div<{ enabled: boolean }>`\r\n  height: 100%;\r\n  border-radius: 1px;\r\n  box-sizing: border-box;\r\n  background-color: ${({ enabled }) => (enabled ? \"#925bff\" : \"transparent\")};\r\n`;\r\n\r\nconst ToggleButton: React.FC<ToggleButtonProps> = ({\r\n  enabled,\r\n  onClick,\r\n  children,\r\n}) => {\r\n  return (\r\n    <MainButton onClick={onClick}>\r\n      <IndicatorContainer>\r\n        <Indicator enabled={enabled} />\r\n      </IndicatorContainer>\r\n      {children}\r\n    </MainButton>\r\n  );\r\n};\r\n\r\nexport default ToggleButton;\r\n","import React from \"react\";\r\nimport Select from \"react-dropdown-select\";\r\nimport { SetterOrUpdater } from \"recoil\";\r\n\r\nimport { Weight } from \"../../lib\";\r\nimport \"./StyleSelect.css\";\r\n\r\ninterface StyleSelectProps {\r\n  value: Weight;\r\n  setter: SetterOrUpdater<Weight>;\r\n}\r\n\r\ntype WeightOption = { key: string; value: Weight };\r\n\r\nconst options: WeightOption[] = [\r\n  {\r\n    key: \"Thin\",\r\n    value: \"thin\",\r\n  },\r\n  {\r\n    key: \"Light\",\r\n    value: \"light\",\r\n  },\r\n  {\r\n    key: \"Regular\",\r\n    value: \"regular\",\r\n  },\r\n  {\r\n    key: \"Bold\",\r\n    value: \"bold\",\r\n  },\r\n  {\r\n    key: \"Fill\",\r\n    value: \"fill\",\r\n  },\r\n  {\r\n    key: \"Duotone\",\r\n    value: \"duotone\",\r\n  },\r\n];\r\n\r\nconst StyleSelect: React.FC<StyleSelectProps> = ({ value, setter }) => {\r\n  const handleStyleChange = (values: WeightOption[]) =>\r\n    setter(values[0].value as Weight);\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      values={[{ key: value.replace(/^\\w/, (c) => c.toUpperCase()), value }]}\r\n      searchable={false}\r\n      labelField=\"key\"\r\n      onChange={handleStyleChange}\r\n      itemRenderer={({\r\n        item,\r\n        itemIndex,\r\n        state: { cursor, values },\r\n        methods,\r\n      }) => (\r\n        <span\r\n          role=\"option\"\r\n          aria-selected={item.key === values[0].key}\r\n          className={`react-dropdown-select-item ${\r\n            itemIndex === cursor ? \"react-dropdown-select-item-active\" : \"\"\r\n          }`}\r\n          onClick={() => methods.addItem(item)}\r\n        >\r\n          {item.key}\r\n        </span>\r\n      )}\r\n      contentRenderer={({ state: { values } }) => (\r\n        <div className=\"react-dropdown-select-content\">{values[0].key}</div>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StyleSelect;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { ClipboardText, Shuffle, UploadSimple } from \"phosphor-react\";\r\n\r\nimport { Weight } from \"../../lib\";\r\nimport {\r\n  textInputAtom,\r\n  fileInputAtom,\r\n  iconWeightAtom,\r\n  iconSizeAtom,\r\n  useControlSetAtom,\r\n  shuffleAtom,\r\n  customPreviewAtom,\r\n} from \"../../state\";\r\n\r\nimport {\r\n  DropInput,\r\n  DropInputLabel,\r\n  InputsContainer,\r\n  MainButton,\r\n  MenuContainer,\r\n  ResetButton,\r\n  SettingsContainer,\r\n  SliderContainer,\r\n  Slider,\r\n  SliderLabel,\r\n  TextInput,\r\n  TextInputContainer,\r\n  TextInputLabel,\r\n} from \"./Menu.styles\";\r\nimport ToggleButton from \"./ToggleButton\";\r\nimport StyleSelect from \"./StyleSelect\";\r\n\r\ninterface FileResult {\r\n  name: string;\r\n  content: string;\r\n}\r\n\r\nconst Menu: React.FC<{}> = () => {\r\n  const [weight, setWeight] = useRecoilState(iconWeightAtom);\r\n  const [size, setSize] = useRecoilState(iconSizeAtom);\r\n  const [textInputValue, setTextInputValue] = useRecoilState(textInputAtom);\r\n  const [filenames, setFilenames] = useState<string[]>([]);\r\n  const setFileInputValues = useSetRecoilState(fileInputAtom);\r\n  const setCustomPreview = useSetRecoilState(customPreviewAtom);\r\n  const [useControls, setUseControls] = useRecoilState(useControlSetAtom);\r\n  const shuffle = useSetRecoilState(shuffleAtom);\r\n\r\n  const handleDrop = useCallback(\r\n    async (acceptedFiles: File[]) => {\r\n      let newWeight: Weight = \"regular\";\r\n\r\n      const icons: FileResult[] = await Promise.all<FileResult>(\r\n        acceptedFiles.map((file) => {\r\n          return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            let content: string;\r\n\r\n            reader.onabort = () => reject(\"File reading was aborted\");\r\n            reader.onerror = () => reject(\"File reading has failed\");\r\n            reader.onload = () => {\r\n              const binaryString = reader.result as string;\r\n              if (binaryString) content = binaryString;\r\n\r\n              const suffix = file.name.split(\".svg\")[0].split(\"-\").slice(-1)[0];\r\n              switch (suffix) {\r\n                case \"thin\":\r\n                case \"light\":\r\n                case \"bold\":\r\n                case \"fill\":\r\n                case \"duotone\":\r\n                  newWeight = suffix;\r\n                  break;\r\n                case \"duo\":\r\n                  newWeight = \"duotone\";\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            };\r\n            reader.onloadend = () => resolve({ name: file.name, content });\r\n            reader.readAsText(file, \"utf8\");\r\n          });\r\n        })\r\n      );\r\n\r\n      setFileInputValues(icons.map(({ content }) => content));\r\n      setFilenames(icons.map(({ name }) => name));\r\n      setWeight(newWeight);\r\n    },\r\n    [setFileInputValues, setWeight]\r\n  );\r\n\r\n  const handleReset = () => {\r\n    setTextInputValue(\"\");\r\n    setFileInputValues([]);\r\n    setFilenames([]);\r\n    setCustomPreview(null);\r\n  };\r\n\r\n  const handleToggleControls = () => {\r\n    setUseControls((u) => !u);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MenuContainer>\r\n        <InputsContainer>\r\n          <TextInputContainer hasValue={!!textInputValue}>\r\n            <TextInput\r\n              placeholder=\"Paste SVG\"\r\n              value={textInputValue}\r\n              onChange={(e) => setTextInputValue(e.target.value)}\r\n              onClick={(e) => e.currentTarget.select()}\r\n            />\r\n            {/* <TextInputLabel>\r\n              <ClipboardText size={24} />\r\n              Paste SVG\r\n            </TextInputLabel> */}\r\n          </TextInputContainer>\r\n          <Dropzone multiple={true} accept=\"image/*\" onDrop={handleDrop}>\r\n            {({ getRootProps, getInputProps }) => (\r\n              <DropInput {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                {filenames.length ? (\r\n                  <div>\r\n                    {filenames.map((name) => (\r\n                      <p key={name}>{name}</p>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <DropInputLabel>\r\n                    <UploadSimple size={18} />\r\n                    <p>Drop SVGs or click to upload</p>\r\n                  </DropInputLabel>\r\n                )}\r\n              </DropInput>\r\n            )}\r\n          </Dropzone>\r\n          <ResetButton onClick={handleReset}>Reset</ResetButton>\r\n        </InputsContainer>\r\n      </MenuContainer>\r\n      <SettingsContainer>\r\n        <StyleSelect value={weight} setter={setWeight} />\r\n        <SliderContainer>\r\n          <SliderLabel>{size}px</SliderLabel>\r\n          <Slider\r\n            min={16}\r\n            max={192}\r\n            step={4}\r\n            value={size}\r\n            onChange={({ target: { value } }) => setSize(+value)}\r\n          />\r\n        </SliderContainer>\r\n        <ToggleButton enabled={useControls} onClick={handleToggleControls}>\r\n          Control set\r\n        </ToggleButton>\r\n        <MainButton onClick={(e) => shuffle(e.timeStamp)}>\r\n          <Shuffle size={18} /> Shuffle\r\n        </MainButton>\r\n      </SettingsContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import styled from \"styled-components\";\r\n\r\nexport const TestCaseContainer = styled.div`\r\n  color: #35313d;\r\n`;\r\n\r\nexport const IconButtonContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 64px 56px 48px 32px;\r\n  gap: 48px;\r\n  align-items: center;\r\n`;\r\n\r\nexport const IconButton = styled.div<{ $size: number, $radius: number; $dark?: boolean; }>`\r\n  display: grid;\r\n  place-items: center;\r\n  height: ${({ $size }) => $size}px;\r\n  width: ${({ $size }) => $size}px;\r\n  border-radius: ${({ $radius }) => $radius}px;\r\n  background: ${({ $dark }) => ($dark ? \"#35313d\" : \"#EBEAEC\")};\r\n  color: ${({ $dark }) => ($dark ? \"#EBEAEC\" : \"#35313d\")};\r\n\r\n  & img {\r\n    color: ${({ $dark }) => ($dark ? \"#EBEAEC\" : \"#35313d\")};\r\n  }\r\n`;\r\n\r\nexport const TextButtonContainer = styled.div`\r\n  margin: 40px 0;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const TextButton = styled.span<{ $large?: boolean }>`\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  gap: 8px;\r\n  border-radius: ${({ $large }) => ($large ? \"80\" : \"24\")}px;\r\n  padding: ${({ $large }) => $large ? \"12px 32px 12px 24px\" : \"12px 20px 12px 16px\"};\r\n  background: #ebeaec;\r\n  margin-right: 32px;\r\n  font-size: ${({ $large }) => ($large ? 24 : 16)}px;\r\n  font-weight: ${({ $large }) => ($large ? \"bold\" : \"normal\")};\r\n`;\r\n\r\nexport const TestUIContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: 8px;\r\n  background: #ebeaec;\r\n`;\r\n\r\nexport const LargeIconContainer = styled.div`\r\n  flex: 1;\r\n  display: grid;\r\n  place-items: center;\r\n  padding: 48px 108px;\r\n`;\r\n\r\nexport const MockMenu = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n  padding: 32px 24px;\r\n  background: #35313d;\r\n`;\r\n\r\nexport const MockMenuItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  color: #ebeaec;\r\n`;\r\n\r\nexport const MockToolbar = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 8px 20px;\r\n`;\r\n","import React, { useMemo } from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  Folder,\r\n  House,\r\n  MusicNotes,\r\n  PencilLine,\r\n  Smiley,\r\n  Star,\r\n  UserCircle,\r\n  IconContext,\r\n  Icon,\r\n} from \"phosphor-react\";\r\n\r\nimport { isIcon } from \"../../lib\";\r\nimport {\r\n  textInputAtom,\r\n  fileInputAtom,\r\n  iconWeightAtom,\r\n  customPreviewAtom,\r\n} from \"../../state\";\r\nimport {\r\n  TestCaseContainer,\r\n  IconButtonContainer,\r\n  IconButton,\r\n  TextButtonContainer,\r\n  TextButton,\r\n  TestUIContainer,\r\n  LargeIconContainer,\r\n  MockMenu,\r\n  MockMenuItem,\r\n  MockToolbar,\r\n} from \"./TestCases.styles\";\r\n\r\nconst TestCases: React.FC<{}> = () => {\r\n  const textInput = useRecoilValue(textInputAtom);\r\n  const fileInput = useRecoilValue(fileInputAtom);\r\n  const customPreviewIcon = useRecoilValue(customPreviewAtom);\r\n  const weight = useRecoilValue(iconWeightAtom);\r\n\r\n  const isControlPreview = !!customPreviewIcon && isIcon(customPreviewIcon);\r\n  const ControlIcon = customPreviewIcon as Icon;\r\n  const customSource =\r\n    !!customPreviewIcon && !isIcon(customPreviewIcon)\r\n      ? customPreviewIcon?.svgString\r\n      : null;\r\n\r\n  const svgStringDark = useMemo(\r\n    () =>\r\n      (customSource || textInput || fileInput[0] || \"\")\r\n        // .replace(/(<svg.*?)(fill=\"#?\\w+\")(.*?>)/, `$1$3`)\r\n        // .replace(/(<svg.*?(?!fill\\=\"#*\\w+\").*?)>/, `$1 fill=\"#EBEAEC\">`)\r\n        // .replace(/#000000/g, \"#EBEAEC\")\r\n        // .replace(/#000/g, \"#EBEAEC\")\r\n        // .replace(/black/g, \"#EBEAEC\"),\r\n        .replace(/fill=\"#?(?!none)(?!transparent)\\w+\"/g, \"fill=\\\"#EBEAEC\\\"\")\r\n        .replace(/stroke=\"#?(?!none)(?!transparent)\\w+\"/g, \"stroke=\\\"#EBEAEC\\\"\"),\r\n    [textInput, fileInput, customSource]\r\n  );\r\n\r\n  const svgStringLight = useMemo(\r\n    () => svgStringDark.replace(/#EBEAEC/gi, \"#35313D\"),\r\n    [svgStringDark]\r\n  );\r\n\r\n  const displayIcon =\r\n    !!customPreviewIcon && !isIcon(customPreviewIcon)\r\n      ? customPreviewIcon.svgString\r\n      : svgStringDark;\r\n\r\n  return (\r\n    <IconContext.Provider\r\n      value={{ size: \"1em\", weight, color: \"currentColor\", mirrored: false }}\r\n    >\r\n      <TestCaseContainer>\r\n        <IconButtonContainer>\r\n          <IconButton $size={72} $radius={36} $dark>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={48} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={48}\r\n                width={48}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringDark)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={48} />\r\n            )}\r\n          </IconButton>\r\n          <IconButton $size={56} $radius={36} $dark>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={32} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={32}\r\n                width={32}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringDark)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={32} />\r\n            )}\r\n          </IconButton>\r\n          <IconButton $size={48} $radius={36} $dark>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={24} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={24}\r\n                width={24}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringDark)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={24} />\r\n            )}\r\n          </IconButton>\r\n          <IconButton $size={32} $radius={36} $dark>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={16} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={16}\r\n                width={16}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringDark)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={16} />\r\n            )}\r\n          </IconButton>\r\n          <IconButton $size={72} $radius={36}>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={48} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={48}\r\n                width={48}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringLight)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={48} />\r\n            )}\r\n          </IconButton>\r\n          <IconButton $size={56} $radius={20}>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={32} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={32}\r\n                width={32}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringLight)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={32} />\r\n            )}\r\n          </IconButton>\r\n          <IconButton $size={48} $radius={8}>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={24} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={24}\r\n                width={24}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringLight)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={24} />\r\n            )}\r\n          </IconButton>\r\n          <IconButton $size={32} $radius={0}>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={16} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={16}\r\n                width={16}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringLight)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={16} />\r\n            )}\r\n          </IconButton>\r\n        </IconButtonContainer>\r\n        <TextButtonContainer>\r\n          <TextButton>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={24} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={24}\r\n                width={24}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringLight)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={24} />\r\n            )}{\" \"}\r\n            Button\r\n          </TextButton>\r\n          <TextButton $large>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={48} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={48}\r\n                width={48}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringLight)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={48} />\r\n            )}{\" \"}\r\n            Button\r\n          </TextButton>\r\n        </TextButtonContainer>\r\n        <TestUIContainer>\r\n          <LargeIconContainer>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={144} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={144}\r\n                width={144}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringLight)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={144} />\r\n            )}\r\n          </LargeIconContainer>\r\n          <MockMenu>\r\n            <MockMenuItem>Menu Title</MockMenuItem>\r\n            <MockMenuItem>\r\n              <Folder size={24} /> Menu Item 1\r\n            </MockMenuItem>\r\n            <MockMenuItem>\r\n              {isControlPreview ? (\r\n                <ControlIcon size={24} />\r\n              ) : svgStringDark ? (\r\n                <img\r\n                  height={24}\r\n                  width={24}\r\n                  src={`data:image/svg+xml,${encodeURIComponent(\r\n                    svgStringDark\r\n                  )}`}\r\n                  alt=\"\"\r\n                />\r\n              ) : (\r\n                <Smiley size={24} />\r\n              )}{\" \"}\r\n              Menu Item 2\r\n            </MockMenuItem>\r\n            <MockMenuItem>\r\n              <PencilLine size={24} /> Menu Item 3\r\n            </MockMenuItem>\r\n          </MockMenu>\r\n          <MockToolbar>\r\n            <House size={24} />\r\n            <Star size={24} />\r\n            {isControlPreview ? (\r\n              <ControlIcon size={24} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={24}\r\n                width={24}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringLight)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={24} />\r\n            )}\r\n            <MusicNotes size={24} />\r\n            <UserCircle size={24} />\r\n          </MockToolbar>\r\n        </TestUIContainer>\r\n      </TestCaseContainer>\r\n    </IconContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TestCases;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\n\nimport \"./index.css\";\nimport { App } from \"./components\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}