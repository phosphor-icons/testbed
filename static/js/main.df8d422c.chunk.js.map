{"version":3,"sources":["state/index.ts","components/App/App.styles.tsx","components/App/App.tsx","lib/index.ts","components/Grid/Grid.styles.tsx","components/Grid/Grid.tsx","components/Header/Header.styles.ts","components/Header/Header.tsx","components/Menu/Menu.styles.tsx","components/Menu/ToggleButton.tsx","components/Menu/StyleSelect.tsx","components/Menu/Menu.tsx","components/TestCases/TestCases.styles.tsx","components/TestCases/TestCases.tsx","serviceWorker.ts","index.tsx"],"names":["AppStyles","createGlobalStyle","AppContainer","styled","div","DemoArea","MainButton","button","App","isIcon","candidate","displayName","controlIcons","Object","values","IconLibrary","filter","i","length","j","Math","floor","random","temp","slice","textInputAtom","atom","key","default","fileInputAtom","iconWeightAtom","iconSizeAtom","useControlSetAtom","shuffleAtom","iconSetSelector","selector","get","arr","showControls","textInput","fileInput","size","copies","exp","testIcons","concat","Array","fill","name","svgString","newIcons","map","file","index","flat","reduce","a","b","customPreviewAtom","GridContainer","$size","sqrt","Grid","useRecoilValue","weight","icons","setCustomPreview","useSetRecoilState","Provider","value","color","mirrored","Icon","onClick","height","width","src","encodeURIComponent","alt","HeaderContainer","header","HeaderContent","HeaderTitle","TextInputLabel","TextInputContainer","hasValue","css","TextInput","textarea","DropInput","DropInputLabel","ResetButton","Header","useRecoilState","textInputValue","setTextInputValue","useState","filenames","setFilenames","setWeight","setFileInputValues","handleDrop","useCallback","acceptedFiles","newWeight","Promise","all","resolve","reject","content","reader","FileReader","onabort","onerror","onload","binaryString","result","suffix","split","onloadend","readAsText","placeholder","onChange","e","target","currentTarget","select","multiple","accept","onDrop","getRootProps","getInputProps","SettingsContainer","SettingsContent","SliderContainer","Slider","input","attrs","type","SliderLabel","span","IndicatorContainer","Indicator","enabled","ToggleButton","children","options","StyleSelect","setter","replace","c","toUpperCase","searchable","labelField","itemRenderer","item","itemIndex","state","cursor","methods","role","aria-selected","className","addItem","contentRenderer","Menu","setSize","useControls","setUseControls","shuffle","u","min","max","step","timeStamp","UIContainer","aside","UIHeader","UIHeaderItems","UINavBar","UIBottomSheet","UIBottomSheetHeader","UIBottomSheetItem","UIContents","UIChipsContiner","UIChip","$active","UICard","UICardText","$withIcon","$width","UICardButtons","IconButton","$radius","TestCases","customPreviewIcon","isControlPreview","ControlIcon","customSource","svgStringDark","useMemo","svgStringLight","svgStringMid","style","flex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df8d422c.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\nimport * as IconLibrary from \"phosphor-react\";\r\nimport { Icon, IconWeight } from \"phosphor-react\";\r\n\r\nimport { isIcon, duplicateArray } from \"../lib\";\r\n\r\nlet controlIcons: Icon[] = Object.values(IconLibrary).filter(isIcon);\r\n\r\nfor (let i = controlIcons.length - 1; i > 0; i--) {\r\n  const j = Math.floor(Math.random() * i);\r\n  const temp = controlIcons[i];\r\n  controlIcons[i] = controlIcons[j];\r\n  controlIcons[j] = temp;\r\n}\r\n\r\ncontrolIcons = controlIcons.slice(0, 80);\r\n\r\nfor (let i = controlIcons.length - 1; i > 0; i--) {\r\n  const j = Math.floor(Math.random() * i);\r\n  const temp = controlIcons[i];\r\n  controlIcons[i] = controlIcons[j];\r\n  controlIcons[j] = temp;\r\n}\r\n\r\nexport const textInputAtom = atom<string>({\r\n  key: \"textInputAtom\",\r\n  default: \"\",\r\n});\r\n\r\nexport const fileInputAtom = atom<string[]>({\r\n  key: \"fileInputAtom\",\r\n  default: [],\r\n});\r\n\r\nexport const iconWeightAtom = atom<IconWeight>({\r\n  key: \"iconWeightAtom\",\r\n  default: \"regular\",\r\n});\r\n\r\nexport const iconSizeAtom = atom<number>({\r\n  key: \"iconSizeAtom\",\r\n  default: 32,\r\n});\r\n\r\nexport const useControlSetAtom = atom<boolean>({\r\n  key: \"useControlSetAtom\",\r\n  default: true,\r\n});\r\n\r\nexport const shuffleAtom = atom<number>({\r\n  key: \"shuffleAtom\",\r\n  default: 0,\r\n});\r\n\r\ntype DisplayIcon = Icon | { name: string; svgString: string };\r\n\r\nexport const iconSetSelector = selector<DisplayIcon[]>({\r\n  key: \"iconSetSelector\",\r\n  get: ({ get }) => {\r\n    const Q = get(shuffleAtom);\r\n    void Q;\r\n    const showControls = get(useControlSetAtom);\r\n    const textInput = get(textInputAtom);\r\n    const fileInput = get(fileInputAtom);\r\n    const size = get(iconSizeAtom);\r\n\r\n    const copies = Math.floor(1.9 + 40 * Math.exp(-0.0939 * size));\r\n\r\n    let testIcons: DisplayIcon[] = [];\r\n    if (textInput) {\r\n      testIcons = testIcons.concat(\r\n        new Array(10).fill({ name: \"textInput\", svgString: textInput })\r\n      );\r\n    }\r\n\r\n    if (fileInput) {\r\n      const newIcons = fileInput.map((file, index) => ({\r\n        name: `fileInput-${index}`,\r\n        svgString: file,\r\n      }));\r\n\r\n      testIcons = testIcons.concat(new Array(10).fill(newIcons).flat());\r\n    }\r\n\r\n    if (showControls) testIcons = testIcons.concat(controlIcons);\r\n    if (copies > 1) testIcons = duplicateArray(testIcons, copies);\r\n\r\n    for (let i = testIcons.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      const temp = testIcons[i];\r\n      testIcons[i] = testIcons[j];\r\n      testIcons[j] = temp;\r\n    }\r\n\r\n    return testIcons;\r\n  },\r\n});\r\n\r\nexport const customPreviewAtom = atom<DisplayIcon | null>({\r\n  key: \"customPreviewIcon\",\r\n  default: null,\r\n});\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const AppStyles = createGlobalStyle`\r\n  h1, h2, h3, h4, h5, h6 {\r\n    color: #925BFF;\r\n    margin: 0 0 8px;\r\n  }\r\n\r\n  h1 {\r\n    font-weight: normal;\r\n    font-size: 28px;\r\n  }\r\n\r\n  p {\r\n    font-size: 16px;\r\n  }\r\n\r\n  code,\r\n  input,\r\n  button,\r\n  textarea,\r\n  select {\r\n    font-family: \"IBM Plex Mono\", monospace;\r\n    font-size: 13px;\r\n    color: #925BFF;\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const AppContainer = styled.div`\r\n  min-height: 100vh;\r\n  background-color: white;\r\n  font-family: \"Manrope\", sans-serif;\r\n  font-size: 13px;\r\n`;\r\n\r\nexport const DemoArea = styled.div`\r\n  position: relative;\r\n  display: grid;\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n  grid-template-columns: 360px 1fr;\r\n  padding: 32px 40px 64px;\r\n  gap: 32px;\r\n`;\r\n\r\nexport const MainButton = styled.button`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 11.5px;\r\n  min-height: 48px;\r\n  padding: 11px 24px;\r\n  border: 1px solid #925bff;\r\n  background: transparent;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background: rgba(146, 91, 255, 0.1);\r\n  }\r\n\r\n  &:active {\r\n    background: rgba(146, 91, 255, 0.5);\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { AppStyles, AppContainer, DemoArea } from \"./App.styles\";\r\nimport { Header, Menu, Grid, TestCases } from \"..\";\r\n\r\nconst App: React.FC<{}> = () => {\r\n  return (\r\n    <AppContainer>\r\n      <AppStyles />\r\n      <Header />\r\n      <Menu />\r\n      <DemoArea>\r\n        <TestCases />\r\n        <Grid />\r\n      </DemoArea>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { Icon } from \"phosphor-react\";\r\n\r\nexport type Weight = \"thin\" | \"light\" | \"regular\" | \"bold\" | \"fill\" | \"duotone\";\r\n\r\nexport const isIcon = (candidate: any): candidate is Icon => {\r\n  return !!candidate.displayName;\r\n};\r\n\r\nexport const duplicateArray = (arr: any[], times: number) =>\r\n  Array(times)\r\n    .fill([...arr])\r\n    .reduce((a, b) => a.concat(b));\r\n","import styled from \"styled-components\";\r\n\r\nexport const GridContainer = styled.div<{ $size: number }>`\r\n  display: flex;\r\n  align-content: flex-start;\r\n  flex-flow: wrap;\r\n  justify-content: space-between;\r\n  gap: ${({ $size }) => 8 * Math.sqrt($size) - 16}px;\r\n\r\n  & > * {\r\n    cursor: pointer;\r\n  }\r\n\r\n  & img {\r\n    transition: background 200ms ease;\r\n  }\r\n\r\n  &:hover img {\r\n    background: rgba(146, 91, 255, 0.5);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { IconContext } from \"phosphor-react\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\n\r\nimport {\r\n  iconSizeAtom,\r\n  iconWeightAtom,\r\n  iconSetSelector,\r\n  customPreviewAtom,\r\n} from \"../../state\";\r\nimport { isIcon } from \"../../lib\";\r\nimport { GridContainer } from \"./Grid.styles\";\r\n\r\nconst Grid: React.FC<{}> = () => {\r\n  const size = useRecoilValue(iconSizeAtom);\r\n  const weight = useRecoilValue(iconWeightAtom);\r\n  const icons = useRecoilValue(iconSetSelector);\r\n  const setCustomPreview = useSetRecoilState(customPreviewAtom);\r\n\r\n  return (\r\n    <IconContext.Provider\r\n      value={{ size, weight, color: \"black\", mirrored: false }}\r\n    >\r\n      <GridContainer $size={size}>\r\n        {icons.map((Icon, index) =>\r\n          isIcon(Icon) ? (\r\n            <Icon\r\n              key={`${Icon.displayName}-${index}`}\r\n              onClick={() => setCustomPreview(Icon)}\r\n            />\r\n          ) : (\r\n            <img\r\n              key={`${Icon.name}-${index}`}\r\n              height={size}\r\n              width={size}\r\n              src={`data:image/svg+xml,${encodeURIComponent(Icon.svgString)}`}\r\n              alt=\"\"\r\n              onClick={() => setCustomPreview(Icon)}\r\n            />\r\n          )\r\n        )}\r\n      </GridContainer>\r\n    </IconContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import styled, { css } from \"styled-components\";\r\nimport { MainButton } from \"../App/App.styles\";\r\n\r\nexport const HeaderContainer = styled.header`\r\n  padding: 32px 40px 0;\r\n  color: #925bff;\r\n  background-color: rgba(146, 91, 255, 0.08);\r\n`;\r\n\r\nexport const HeaderContent = styled.div`\r\n  display: flex;\r\n  flex-flow: wrap;\r\n  align-items: stretch;\r\n  justify-content: space-between;\r\n  gap: 12px;\r\n  max-width: 1120px;\r\n  max-height: 640px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const HeaderTitle = styled.div`\r\n  width: 296px;\r\n`;\r\n\r\nexport const InputsContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 16px;\r\n`;\r\n\r\nexport const TextInputLabel = styled.div`\r\n  position: absolute;\r\n  top: calc(50% - 44px);\r\n  left: 0;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 32px 24px;\r\n  user-select: none;\r\n  pointer-events: none;\r\n`;\r\n\r\nexport const TextInputContainer = styled.div<{ hasValue: boolean }>`\r\n  position: relative;\r\n  flex: 1;\r\n  display: flex;\r\n  /* flex-direction: column; */\r\n\r\n  ${TextInputLabel} {\r\n    ${({ hasValue }) =>\r\n      hasValue &&\r\n      css`\r\n         {\r\n          display: none;\r\n        }\r\n      `};\r\n  }\r\n\r\n  &:focus-within ${TextInputLabel} {\r\n    display: none;\r\n  }\r\n\r\n  &:focus-within ::placeholder {\r\n    opacity: 0;\r\n  }\r\n`;\r\n\r\nexport const TextInput = styled.textarea`\r\n  width: 100%;\r\n  height: 52px;\r\n  min-height: 52px;\r\n  max-height: 640px;\r\n  margin: 0;\r\n  padding: 16px 24px;\r\n  background: rgba(146, 91, 255, 0.1);\r\n  border: 1px solid #925bff;\r\n  box-sizing: border-box;\r\n  border-radius: 6px;\r\n  resize: vertical;\r\n\r\n  &::placeholder {\r\n    color: #925bff;\r\n  }\r\n`;\r\n\r\nexport const DropInput = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 16px 24px;\r\n  background: rgba(146, 91, 255, 0.1);\r\n  border: 1px solid #925bff;\r\n  box-sizing: content-box;\r\n  border-radius: 6px;\r\n  font-family: \"IBM Plex Mono\", monospace;\r\n  font-size: 13px;\r\n  outline: none;\r\n  cursor: pointer;\r\n  height: 18px;\r\n  overflow-y: auto;\r\n\r\n  & p {\r\n    margin: 0;\r\n    font-size: 13px;\r\n  }\r\n`;\r\n\r\nexport const DropInputLabel = styled.div`\r\n  & p {\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport const ResetButton = styled(MainButton)`\r\n  width: 72px;\r\n  height: 52px;\r\n`;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { IconWeight } from \"phosphor-react\";\r\n\r\nimport {\r\n  textInputAtom,\r\n  fileInputAtom,\r\n  iconWeightAtom,\r\n  customPreviewAtom,\r\n} from \"../../state\";\r\n\r\nimport {\r\n  HeaderContainer,\r\n  HeaderContent,\r\n  HeaderTitle,\r\n  TextInputContainer,\r\n  TextInput,\r\n  DropInput,\r\n  DropInputLabel,\r\n  ResetButton,\r\n} from \"./Header.styles\";\r\n\r\ninterface FileResult {\r\n  name: string;\r\n  content: string;\r\n}\r\n\r\nconst Header: React.FC = () => {\r\n  const [textInputValue, setTextInputValue] = useRecoilState(textInputAtom);\r\n  const [filenames, setFilenames] = useState<string[]>([]);\r\n  const setWeight = useSetRecoilState(iconWeightAtom);\r\n  const setFileInputValues = useSetRecoilState(fileInputAtom);\r\n  const setCustomPreview = useSetRecoilState(customPreviewAtom);\r\n\r\n  const handleDrop = useCallback(\r\n    async (acceptedFiles: File[]) => {\r\n      let newWeight: IconWeight = \"regular\";\r\n\r\n      const icons: FileResult[] = await Promise.all<FileResult>(\r\n        acceptedFiles.map((file) => {\r\n          return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            let content: string;\r\n\r\n            reader.onabort = () => reject(\"File reading was aborted\");\r\n            reader.onerror = () => reject(\"File reading has failed\");\r\n            reader.onload = () => {\r\n              const binaryString = reader.result as string;\r\n              if (binaryString) content = binaryString;\r\n\r\n              const suffix = file.name.split(\".svg\")[0].split(\"-\").slice(-1)[0];\r\n              switch (suffix) {\r\n                case \"thin\":\r\n                case \"light\":\r\n                case \"bold\":\r\n                case \"fill\":\r\n                case \"duotone\":\r\n                  newWeight = suffix;\r\n                  break;\r\n                case \"duo\":\r\n                  newWeight = \"duotone\";\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            };\r\n            reader.onloadend = () => resolve({ name: file.name, content });\r\n            reader.readAsText(file, \"utf8\");\r\n          });\r\n        })\r\n      );\r\n\r\n      setFileInputValues(icons.map(({ content }) => content));\r\n      setFilenames(icons.map(({ name }) => name));\r\n      setWeight(newWeight);\r\n    },\r\n    [setFileInputValues, setWeight]\r\n  );\r\n\r\n  const handleReset = () => {\r\n    setTextInputValue(\"\");\r\n    setFileInputValues([]);\r\n    setFilenames([]);\r\n    setCustomPreview(null);\r\n  };\r\n\r\n  return (\r\n    <HeaderContainer>\r\n      <HeaderContent>\r\n        <HeaderTitle>\r\n          <h1>Phosphor Testbed</h1>\r\n          {/* <code>\r\n            Test new icons for consistency, alignment, usability in context\r\n          </code> */}\r\n        </HeaderTitle>\r\n        <TextInputContainer hasValue={!!textInputValue}>\r\n          <TextInput\r\n            placeholder=\"Paste SVG\"\r\n            value={textInputValue}\r\n            onChange={(e) => setTextInputValue(e.target.value)}\r\n            onClick={(e) => e.currentTarget.select()}\r\n          />\r\n        </TextInputContainer>\r\n        <Dropzone multiple={true} accept=\"image/*\" onDrop={handleDrop}>\r\n          {({ getRootProps, getInputProps }) => (\r\n            <DropInput {...getRootProps()}>\r\n              <input {...getInputProps()} />\r\n              {filenames.length ? (\r\n                <div>\r\n                  {filenames.map((name) => (\r\n                    <p key={name}>{name}</p>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <DropInputLabel>\r\n                  <p>Drop SVGs or click to upload</p>\r\n                </DropInputLabel>\r\n              )}\r\n            </DropInput>\r\n          )}\r\n        </Dropzone>\r\n        <ResetButton onClick={handleReset}>Clear</ResetButton>\r\n      </HeaderContent>\r\n    </HeaderContainer>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SettingsContainer = styled.div`\r\n  position: sticky;\r\n  top: 0;\r\n  padding: 16px 40px;\r\n  color: #925bff;\r\n  background-color: #f6f2ff;\r\n  border-bottom: 1px solid #925bff;\r\n  z-index: 2;\r\n`;\r\n\r\nexport const SettingsContent = styled.div`\r\n  display: flex;\r\n  flex-flow: wrap;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  gap: 12px;\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const SliderContainer = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  gap: 12px;\r\n  height: 22px;\r\n  padding: 12px 24px;\r\n  border: 1px solid #925bff;\r\n  border-radius: 6px;\r\n`;\r\n\r\nexport const Slider = styled.input.attrs({ type: \"range\" })`\r\n  flex: 1;\r\n  background: transparent;\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  border: 1px solid #925bff;\r\n  border-radius: 80px;\r\n  height: 12px;\r\n  box-sizing: border-box;\r\n  margin-top: 5px;\r\n\r\n  &::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 32px;\r\n    height: 20px;\r\n    padding: 6px;\r\n    border-radius: 80px;\r\n    background: #925bff;\r\n    cursor: pointer;\r\n  }\r\n\r\n  &::-moz-range-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 16px;\r\n    height: 16px;\r\n    padding: 6px;\r\n    border-radius: 50%;\r\n    background: #925bff;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const SliderLabel = styled.span`\r\n  /* width: 80px; */\r\n  font-family: \"IBM Plex Mono\", monospace;\r\n  font-size: 13px;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { MainButton } from \"../App/App.styles\";\r\n\r\ninterface ToggleButtonProps\r\n  extends React.DetailedHTMLProps<\r\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    HTMLButtonElement\r\n  > {\r\n  enabled: boolean;\r\n}\r\n\r\nconst IndicatorContainer = styled.div`\r\n  height: 24px;\r\n  width: 24px;\r\n  border: 1px solid #925bff;\r\n  box-sizing: border-box;\r\n  border-radius: 3px;\r\n  padding: 3px;\r\n`;\r\n\r\nconst Indicator = styled.div<{ enabled: boolean }>`\r\n  height: 100%;\r\n  border-radius: 1px;\r\n  box-sizing: border-box;\r\n  background-color: ${({ enabled }) => (enabled ? \"#925bff\" : \"transparent\")};\r\n`;\r\n\r\nconst ToggleButton: React.FC<ToggleButtonProps> = ({\r\n  enabled,\r\n  onClick,\r\n  children,\r\n}) => {\r\n  return (\r\n    <MainButton onClick={onClick}>\r\n      <IndicatorContainer>\r\n        <Indicator enabled={enabled} />\r\n      </IndicatorContainer>\r\n      {children}\r\n    </MainButton>\r\n  );\r\n};\r\n\r\nexport default ToggleButton;\r\n","import React from \"react\";\r\nimport Select from \"react-dropdown-select\";\r\nimport { SetterOrUpdater } from \"recoil\";\r\n\r\nimport { Weight } from \"../../lib\";\r\nimport \"./StyleSelect.css\";\r\n\r\ninterface StyleSelectProps {\r\n  value: Weight;\r\n  setter: SetterOrUpdater<Weight>;\r\n}\r\n\r\ntype WeightOption = { key: string; value: Weight };\r\n\r\nconst options: WeightOption[] = [\r\n  {\r\n    key: \"Thin\",\r\n    value: \"thin\",\r\n  },\r\n  {\r\n    key: \"Light\",\r\n    value: \"light\",\r\n  },\r\n  {\r\n    key: \"Regular\",\r\n    value: \"regular\",\r\n  },\r\n  {\r\n    key: \"Bold\",\r\n    value: \"bold\",\r\n  },\r\n  {\r\n    key: \"Fill\",\r\n    value: \"fill\",\r\n  },\r\n  {\r\n    key: \"Duotone\",\r\n    value: \"duotone\",\r\n  },\r\n];\r\n\r\nconst StyleSelect: React.FC<StyleSelectProps> = ({ value, setter }) => {\r\n  const handleStyleChange = (values: WeightOption[]) =>\r\n    setter(values[0].value as Weight);\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      values={[{ key: value.replace(/^\\w/, (c) => c.toUpperCase()), value }]}\r\n      searchable={false}\r\n      labelField=\"key\"\r\n      onChange={handleStyleChange}\r\n      itemRenderer={({\r\n        item,\r\n        itemIndex,\r\n        state: { cursor, values },\r\n        methods,\r\n      }) => (\r\n        <span\r\n          role=\"option\"\r\n          aria-selected={item.key === values[0].key}\r\n          className={`react-dropdown-select-item ${\r\n            itemIndex === cursor ? \"react-dropdown-select-item-active\" : \"\"\r\n          }`}\r\n          onClick={() => methods.addItem(item)}\r\n        >\r\n          {item.key}\r\n        </span>\r\n      )}\r\n      contentRenderer={({ state: { values } }) => (\r\n        <div className=\"react-dropdown-select-content\">{values[0].key}</div>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StyleSelect;\r\n","import React from \"react\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { Shuffle } from \"phosphor-react\";\r\n\r\nimport {\r\n  iconWeightAtom,\r\n  iconSizeAtom,\r\n  useControlSetAtom,\r\n  shuffleAtom,\r\n} from \"../../state\";\r\n\r\nimport { MainButton } from \"../App/App.styles\";\r\nimport {\r\n  SettingsContainer,\r\n  SettingsContent,\r\n  SliderContainer,\r\n  Slider,\r\n  SliderLabel,\r\n} from \"./Menu.styles\";\r\nimport ToggleButton from \"./ToggleButton\";\r\nimport StyleSelect from \"./StyleSelect\";\r\n\r\nconst Menu: React.FC<{}> = () => {\r\n  const [weight, setWeight] = useRecoilState(iconWeightAtom);\r\n  const [size, setSize] = useRecoilState(iconSizeAtom);\r\n  const [useControls, setUseControls] = useRecoilState(useControlSetAtom);\r\n  const shuffle = useSetRecoilState(shuffleAtom);\r\n\r\n  const handleToggleControls = () => {\r\n    setUseControls((u) => !u);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setWeight(\"regular\");\r\n    setSize(32);\r\n    setUseControls(true);\r\n  };\r\n\r\n  return (\r\n    <SettingsContainer>\r\n      <SettingsContent>\r\n        <ToggleButton enabled={useControls} onClick={handleToggleControls}>\r\n          Control set\r\n        </ToggleButton>\r\n        <StyleSelect value={weight} setter={setWeight} />\r\n        <SliderContainer>\r\n          <SliderLabel>Size: {size}px</SliderLabel>\r\n          <Slider\r\n            min={16}\r\n            max={192}\r\n            step={4}\r\n            value={size}\r\n            onChange={({ target: { value } }) => setSize(+value)}\r\n          />\r\n        </SliderContainer>\r\n        <MainButton onClick={(e) => shuffle(e.timeStamp)}>\r\n          <Shuffle size={24} />\r\n        </MainButton>\r\n        <MainButton onClick={handleReset}>Reset</MainButton>\r\n      </SettingsContent>\r\n    </SettingsContainer>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import styled from \"styled-components\";\r\n\r\nexport const UIContainer = styled.aside`\r\n  position: sticky;\r\n  top: 112px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  background-color: #efeeef;\r\n  border-radius: 8px;\r\n  height: 484px;\r\n  overflow-y: hidden;\r\n`;\r\n\r\nexport const UIHeader = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 8px 16px;\r\n  color: #9a989e;\r\n  background-color: #e7e6e8;\r\n  border-top-left-radius: 8px;\r\n  border-top-right-radius: 8px;\r\n`;\r\n\r\nexport const UIHeaderItems = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n`;\r\n\r\nexport const UINavBar = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 12px 20px;\r\n  color: white;\r\n  background-color: #35313d;\r\n  border-bottom-left-radius: 8px;\r\n  border-bottom-right-radius: 8px;\r\n  z-index: 1;\r\n`;\r\n\r\nexport const UIBottomSheet = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 18px;\r\n  padding: 20px 20px 68px;\r\n  color: white;\r\n  background-color: #45414d;\r\n  border-radius: 16px;\r\n`;\r\n\r\nexport const UIBottomSheetHeader = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  & h2 {\r\n    color: currentColor;\r\n    margin: 0;\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nexport const UIBottomSheetItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n`;\r\n\r\nexport const UIContents = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  padding: 16px 24px;\r\n`;\r\n\r\nexport const UIChipsContiner = styled.div`\r\n  display: flex;\r\n  gap: 8px;\r\n  padding: 16px 22px 0;\r\n  align-items: center;\r\n  overflow-x: auto;\r\n  -ms-overflow-style: none;\r\n  scrollbar-width: none;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const UIChip = styled.div<{ $active?: boolean }>`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  padding: 6.5px 14.5px 6.5px 10.5px;\r\n  box-sizing: border-box;\r\n  background-color: white;\r\n  border-radius: 20px;\r\n  color: ${({ $active }) => ($active ? \"#35313D\" : \"#9a989e\")};\r\n  border: 1.5px solid ${({ $active }) => ($active ? \"#35313D\" : \"transparent\")};\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    color: #35313d;\r\n    border-color: #35313d;\r\n  }\r\n`;\r\n\r\nexport const UICard = styled.div`\r\n  display: flex;\r\n  gap: 4px;\r\n  padding: 12px;\r\n  background-color: white;\r\n  border-radius: 6px;\r\n  border-top-right-radius: 28px;\r\n`;\r\n\r\nexport const UICardText = styled.div<{ $width?: number; $withIcon?: boolean }>`\r\n  margin: ${({ $withIcon }) => ($withIcon ? `0 12px` : `12px`)};\r\n  background-color: #e7e6e8;\r\n  border-radius: 4px;\r\n  width: ${({ $width }) => $width && `${$width}px`};\r\n  height: 16px;\r\n`;\r\n\r\nexport const UICardButtons = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n`;\r\n\r\nexport const IconButton = styled.div<{\r\n  $size: number;\r\n  $radius: number;\r\n  $active?: boolean;\r\n}>`\r\n  display: grid;\r\n  place-items: center;\r\n  height: ${({ $size }) => $size}px;\r\n  width: ${({ $size }) => $size}px;\r\n  border-radius: ${({ $radius }) => $radius}px;\r\n  background: #e7e6e8;\r\n  color: ${({ $active }) => ($active ? \"#35313d\" : \"#9A989E\")};\r\n\r\n  & img {\r\n    color: ${({ $active }) => ($active ? \"#35313d\" : \"#9A989E\")};\r\n  }\r\n`;\r\n","import React, { useMemo } from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  Alarm,\r\n  WifiMedium,\r\n  BatteryHigh,\r\n  Folder,\r\n  House,\r\n  MusicNotes,\r\n  PencilLine,\r\n  Smiley,\r\n  Star,\r\n  UserCircle,\r\n  IconContext,\r\n  Icon,\r\n  Chats,\r\n  X,\r\n  Planet,\r\n  Robot,\r\n  Leaf,\r\n  Ghost,\r\n} from \"phosphor-react\";\r\n\r\nimport { isIcon } from \"../../lib\";\r\nimport {\r\n  textInputAtom,\r\n  fileInputAtom,\r\n  iconWeightAtom,\r\n  customPreviewAtom,\r\n} from \"../../state\";\r\nimport {\r\n  UIContainer,\r\n  UIHeader,\r\n  UIHeaderItems,\r\n  UINavBar,\r\n  UIBottomSheet,\r\n  UIBottomSheetItem,\r\n  UIBottomSheetHeader,\r\n  UIChipsContiner,\r\n  UIChip,\r\n  UIContents,\r\n  UICard,\r\n  UICardText,\r\n  IconButton,\r\n  UICardButtons,\r\n} from \"./TestCases.styles\";\r\n\r\nconst TestCases: React.FC<{}> = () => {\r\n  const textInput = useRecoilValue(textInputAtom);\r\n  const fileInput = useRecoilValue(fileInputAtom);\r\n  const customPreviewIcon = useRecoilValue(customPreviewAtom);\r\n  const weight = useRecoilValue(iconWeightAtom);\r\n\r\n  const isControlPreview = !!customPreviewIcon && isIcon(customPreviewIcon);\r\n  const ControlIcon = customPreviewIcon as Icon;\r\n  const customSource =\r\n    !!customPreviewIcon && !isIcon(customPreviewIcon)\r\n      ? customPreviewIcon?.svgString\r\n      : null;\r\n\r\n  const svgStringDark = useMemo(\r\n    () =>\r\n      (customSource || textInput || fileInput[0] || \"\")\r\n        // .replace(/(<svg.*?)(fill=\"#?\\w+\")(.*?>)/, `$1$3`)\r\n        // .replace(/(<svg.*?(?!fill\\=\"#*\\w+\").*?)>/, `$1 fill=\"#EBEAEC\">`)\r\n        // .replace(/#000000/g, \"#EBEAEC\")\r\n        // .replace(/#000/g, \"#EBEAEC\")\r\n        // .replace(/black/g, \"#EBEAEC\"),\r\n        // .replace(/opacity=\"\\d+\\w+\"/g, 'opacity=\"0.2\" fill=\"#EBEAEC\"')\r\n        .replace(/fill=\"#?(?!none)(?!transparent)\\w+\"/g, 'fill=\"#EBEAEC\"')\r\n        .replace(/stroke=\"#?(?!none)(?!transparent)\\w+\"/g, 'stroke=\"#EBEAEC\"'),\r\n    [textInput, fileInput, customSource]\r\n  );\r\n\r\n  const svgStringLight = useMemo(\r\n    () => svgStringDark.replace(/#EBEAEC/gi, \"#35313D\"),\r\n    [svgStringDark]\r\n  );\r\n\r\n  const svgStringMid = useMemo(\r\n    () => svgStringDark.replace(/#EBEAEC/gi, \"#9a989e\"),\r\n    [svgStringDark]\r\n  );\r\n\r\n  return (\r\n    <IconContext.Provider\r\n      value={{ size: \"1em\", weight, color: \"currentColor\", mirrored: false }}\r\n    >\r\n      <UIContainer>\r\n        <UIHeader>\r\n          <span>8:01</span>\r\n          <UIHeaderItems>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={16} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={16}\r\n                width={16}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringMid)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={16} />\r\n            )}\r\n            <Alarm size={16} />\r\n            <WifiMedium size={16} />\r\n            <BatteryHigh size={16} />\r\n          </UIHeaderItems>\r\n        </UIHeader>\r\n        <UIChipsContiner>\r\n          <UIChip $active>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={24} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={24}\r\n                width={24}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringLight)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={24} />\r\n            )}\r\n            <span>Latest</span>\r\n          </UIChip>\r\n          <UIChip>\r\n            <Planet size={24} />\r\n            <span>Space</span>\r\n          </UIChip>\r\n          <UIChip>\r\n            <MusicNotes size={24} />\r\n            <span>Music</span>\r\n          </UIChip>\r\n          <UIChip>\r\n            <Robot size={24} />\r\n            <span>Robots</span>\r\n          </UIChip>\r\n          <UIChip>\r\n            <Ghost size={24} />\r\n            <span>Spoopy</span>\r\n          </UIChip>\r\n        </UIChipsContiner>\r\n        <UIContents>\r\n          <UICard>\r\n            <div style={{ flex: 1 }}>\r\n              <UICardText />\r\n              <UICardText />\r\n              {/* <UICardText $width={208} /> */}\r\n              <UICardText />\r\n              <UICardText $width={88} />\r\n            </div>\r\n            <UICardButtons>\r\n              <IconButton $size={48} $radius={48}>\r\n                <Leaf size={32} />\r\n              </IconButton>\r\n              <IconButton $active $size={48} $radius={48}>\r\n                {isControlPreview ? (\r\n                  <ControlIcon size={32} />\r\n                ) : svgStringDark ? (\r\n                  <img\r\n                    height={32}\r\n                    width={32}\r\n                    src={`data:image/svg+xml,${encodeURIComponent(\r\n                      svgStringLight\r\n                    )}`}\r\n                    alt=\"\"\r\n                  />\r\n                ) : (\r\n                  <Smiley size={32} />\r\n                )}\r\n              </IconButton>\r\n            </UICardButtons>\r\n          </UICard>\r\n        </UIContents>\r\n        <UINavBar>\r\n          <House size={24} weight=\"fill\" />\r\n          <Star size={24} />\r\n          {isControlPreview ? (\r\n            <ControlIcon size={24} />\r\n          ) : svgStringDark ? (\r\n            <img\r\n              height={24}\r\n              width={24}\r\n              src={`data:image/svg+xml,${encodeURIComponent(svgStringDark)}`}\r\n              alt=\"\"\r\n            />\r\n          ) : (\r\n            <Smiley size={24} />\r\n          )}\r\n          <Chats size={24} />\r\n          <UserCircle size={24} />\r\n        </UINavBar>\r\n        <UIBottomSheet>\r\n          <UIBottomSheetHeader>\r\n            <h2>Choose one</h2>\r\n            <X size={16} weight=\"bold\" />\r\n          </UIBottomSheetHeader>\r\n          <UIBottomSheetItem>\r\n            <Folder size={24} />\r\n            <span>First item in the list</span>\r\n          </UIBottomSheetItem>\r\n          <UIBottomSheetItem>\r\n            {isControlPreview ? (\r\n              <ControlIcon size={24} />\r\n            ) : svgStringDark ? (\r\n              <img\r\n                height={24}\r\n                width={24}\r\n                src={`data:image/svg+xml,${encodeURIComponent(svgStringDark)}`}\r\n                alt=\"\"\r\n              />\r\n            ) : (\r\n              <Smiley size={24} />\r\n            )}\r\n            <span>A second item</span>\r\n          </UIBottomSheetItem>\r\n          <UIBottomSheetItem>\r\n            <PencilLine size={24} />\r\n            <span>One more item</span>\r\n          </UIBottomSheetItem>\r\n        </UIBottomSheet>\r\n      </UIContainer>\r\n    </IconContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TestCases;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\n\nimport \"./index.css\";\nimport { App } from \"./components\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}